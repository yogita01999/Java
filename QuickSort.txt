import java.util.*; 

class quickSortMiddle { 

    public static void main(String[] args) { 

        int[] arr ={15, 9, 7, 13, 12, 16, 4}; 

        int leng = arr.length; 

         

        quickSortMiddle qs = new quickSortMiddle(); 

        qs.quickSortRecursion(arr, 0, leng-1); 

        qs.printArray(arr); 

    } 

   //method to find middle element of array  

    int partition(int[] arr, int low, int high) 

    { 

        int pivot = arr[(low + high)/2]; 

        // Or we can take lower/higher index element as pivot 

      //  int pivot = arr[low]; 

     //   System.out.println(pivot); 

         

        while(low <= high) 

        { 

            while(arr[low] < pivot) 

            { 

                low++; 

            } 

            while(arr[high] > pivot) 

            { 

                high--; 

            } 

             

            if(low <= high) 

            { 

                int temp = arr[low]; 

                arr[low] = arr[high]; 

                arr[high] = temp; 

                 

                low++; 

                high--; 

            } 

        } 

        return low; 

    } 

 

    void quickSortRecursion(int[]arr, int low, int high) 

    { 

        // here you will get index position of middle element 

        int pi = partition(arr, low, high); 

       

        if(low < pi-1) 

        { 

            //for left hand side part 

           quickSortRecursion(arr, low, pi-1); 

        } 

        if(pi < high) 

        { 

            //for right hand side part 

            quickSortRecursion(arr,pi,high); 

        } 

    } 

    

   void printArray(int[]arr) 

   { 

       for(int i:arr) 

       { 

           System.out.print(i +" "); 

       } 

   } 

     

} 